// 1.9 Массивы
// Массивы задаются квадратныыми скобками. У каждого значения внутри массива свой индекс
// создаются массивы как обычные переменные
// const cars = ['Mazda','Mers','Tesla']

//Массивы также могут задаваться через консутрукцию new Array, но правильный вариант через квадратные скобки
// const cars = new Array('Mazda','Mers','Tesla') 
// console.log(cars)
// console.log(cars[2]) // можно посмотреть что какому индексу соответствует
// console.log(cars.length) // узнаём длину массива, получаем число, которое говорит сколько элементов внутри массива

// cars[0] = 'Porsche' // этой командой мы изменили значение нулевого массива
// console.log(cars)

// cars[3] = 'Мазда' // сделали массив длиннее, добавив ещё элемент
// console.log(cars)

// cars[cars.length] = 'BMW' // добавляет ещё один эелемент и присваивает ему значение
// console.log(cars)

// 1.10 Циклы (итерация массивов)
// const cars = ['Mazda','Mers','Tesla', 'BMW']

// Чтобы не перечилсять все командры подряд, как и в любом языке программирования в JS есть циклы
//  Вариант 1
// for (let i = 0; i < cars.length; i++) { // создаём переменную. Важно чтобы была let и принято i, и задают ей начальное значение
// в условии также задаем конечное значение для i, пока оно меньше длинны массива cars
// далее увеличиваем значением i на 1(единицу)
// console.log(i) // смотрим что такое i и его значения 
// const car = cars[i] // вводим новую переменну car, присваиваем ей значение переменной карс со значением i
// console.log(car)
// }
// таким образом, добавляя ещё один элемент в переменную cars, автоматически всё вносится, и не надо специально менять код программы

// Вариант 2
// Но в последних версиях JS появился более удоблный способ это сделать
// for (let car of cars) {
//     console.log(car)
// } 
// В итоге синтаксис более лаконичный, а результат тот же

// 1.11 Объекты
//  Объекты - это очень важная структура данных в JS
// Чтобы лучше понимать что такое Объекты, можно использовать термин "Групировка"
const person = { // создаём объект person. можно через new Object({}), но правильнее через {}. Так бы говорим, что создаём новый объект
   firstName: 'Egor',
   lastName: 'Vrublevski', // этти ключи мы придумываем самостоятельно
   year: 1989,
   languages: ['Russian','Belarusian','English','Polish'],
   hasWife: true,
   greet: function (){
    console.log('greet from person')
   } // внутри объекта можно вводить разные типы данных, функции
}
// console.log(person) // В консоли появится объект со списком его значений
console.log(person.firstName) // В консоли появится только тот элемент объекта, который я вызвал

// console.log() // По сути console - это тоже объект с методом log
person.greet() // Мы можем также вызвать объект person с методом greet
// По сути все сущности в JS так и сформированы. У них есть разные объекты, а у объектов разные свойства

// Каким образом мы можем обращаться к объектам?
// Например:
console.log(person.firstName) // через точку
console.log(person['lastName']) // через фигурные скобки, но с апострофом
const key = 'languages' // я могу поменять значение переменной с languages на year и получу года, а не языки
console.log(person[key]) // через переменную

// Ключи в объекте мы можем добавлять, напрмер:
person.isProgrammer = true
console.log(person)
// Ключи в объбекте мы можем изменять, напрмер:
person.isProgrammer = false // причем значение будет сейчас это, а не то, которое я сейчас ввёл. И к консоли будет отображаться оно
